#!/bin/bash
# in order to run this script nicely you need to set up an ssh key to store your password.
# If not set up correctly, you'll need to enter your password for every single time you ssh to a machine
# For setting up the ssh key look here: http://www.linuxproblem.org/art_9.html

# if this script does not execute on your machine run: chmod 755 CPUload

# The outut indicates the load over the last 1, 5 and 15 minutes as well as the memory usage
# a value of 1 means that the CPU is completely used
# a value greater than 1 indicates that there are other tasks waiting in line to execute
# a value smaller than 1 indicates free computational resources

# bug report:
# sometimes the uptime command does not return a valid string. In this case an error message is printed

colorLoad()
{
	if (( $(bc <<< "$1 >= 2") == 1 ))
	then
		echo '\e[1;31m'$1'\e[0m'
	elif (( $(bc <<< "$1 >= 1") == 1 ))
	then
		echo '\e[1;33m'$1'\e[0m'
	else
		echo '\e[1;32m'$1'\e[0m'
	fi
}

getLoad()
{
	# define user name to use when ssh to remote machine
	user=$USER
	
	#ssh to remote machine and get uptime and number of cores
	#logout after operations
	test=$(ssh -4 $1 "uptime && grep -c processor /proc/cpuinfo && free -m && ps haux | awk -v user=$user '\$1 ~ user {sum += \$4} END {print user "," sum}' && exit")
	test=`echo "$test" | sed -e 's#.*average: \(\)#\1#'`
	procs=`echo $test | cut -d' ' -f 4`
	memUser=`echo $test | cut -d' ' -f 27`
	
	#string manipulation to save the load values
	values=`echo "$test" | sed -e 's#.*average: \(\)#\1#'`
	first=`echo $values| cut -d' ' -f 1`
	first=`echo $first| cut -d',' -f 1`
	second=`echo $values| cut -d' ' -f 2`
	second=`echo $second| cut -d',' -f 1`
	third=`echo $values| cut -d' ' -f 3`
	totalmem=`echo $test| cut -d':' -f 2`
	totalmem=`echo $totalmem| cut -d' ' -f 1`
	usedmem=`echo $test| cut -d':' -f 3`
	usedmem=`echo $usedmem| cut -d' ' -f 1`
	
	# check if uptime has returned a string
	char=${#first}
	if (("$char" > 0))
	then
		#do floating point division with load and core numbers
		result1=`echo "scale=2; $first/$procs" | bc -l`
		result1=$(colorLoad $result1)

		result2=`echo "scale=2; $second/$procs" | bc -l`
		result2=$(colorLoad $result2)

		result3=`echo "scale=2; $third/$procs" | bc -l`
		result3=$(colorLoad $result3)

		memuse=`echo "scale=2; $usedmem/$totalmem*100" | bc -l`
		if (( $(bc <<< "$memuse>= 75") == 1 ))
		then
			memuse='\e[1;31m'$memuse'\e[0m'
		elif (( $(bc <<< "$memuse >= 50") == 1 ))
		then
			memuse='\e[1;33m'$memuse'\e[0m'
		else
			memuse='\e[1;32m'$memuse'\e[0m'
		fi

   	# set blue color for machine name
		MachineName='\e[1;34m'$1'\e[0m'
		
		# check length of machine name to use tab to align list
		char=${#1}
		if (("$char" > 6))
		then
			echo -e $MachineName '\t'$result1'\t'$result2'\t'$result3'\t'$procs'\t'$usedmem"/"$totalmem'\t   '"("$memuse"%)"'\t'"("$memUser"%)"
		else
			echo -e $MachineName '\t\t'$result1'\t'$result2'\t'$result3'\t'$procs'\t'$usedmem"/"$totalmem'\t   '"("$memuse"%)"'\t'"("$memUser"%)"
		fi

		#sum up values for average calculation
		OneMinSum=`echo "scale=2; $OneMinSum + $first" | bc -l`
		FiveMinSum=`echo "scale=2; $FiveMinSum + $second" | bc -l`
		FifteenMinSum=`echo "scale=2; $FifteenMinSum + $third" | bc -l`
		coreSum=`expr $coreSum + $procs`
		memSum=`expr $memSum + $usedmem`
		memTotal=`expr $memTotal + $totalmem`
		temp=`echo "$memUser * $totalmem / 100" | bc`
		memOwnTotal=`expr $memOwnTotal + $temp`
		
	else
		char=${#1}
		if (("$char" > 6))
		then
			echo -e $1 '\t' "Data was not properly send. Try again later"
		else
			echo -e $1 '\t\t' "Data was not properly send. Try again later"
		fi
	fi


}

OneMinSum=0
FiveMinSum=0
FifteenMinSum=0
coreSum=0
memSum=0
memTotal=0
memOwnTotal=0

echo -e '\e[1m'"Server load"'\t'"1min"'\t'"5min"'\t'"15min"'\t'"cores"'\t'"memory usage (MB)  Percent"'\t'"own usage"'\e[0m'
#echo -e '\e[1;31m'"Servers"'\e[0m'
if [ "$#" -ne 1 ]; then

#list of machines to look for - add line for each of your machines
getLoad Name1
getLoad Name2
getLoad Name3
getLoad Name4

# you can call the script with a machine name and get values only for that machine
else
getLoad $1
fi

if (($coreSum > 0))
then
  #print sum
  OneMinSum=`echo "scale=2; $OneMinSum/$coreSum" | bc -l`
  FiveMinSum=`echo "scale=2; $FiveMinSum/$coreSum" | bc -l`
  FifteenMinSum=`echo "scale=2; $FifteenMinSum/$coreSum" | bc -l`
  reluse=`echo "scale=2; $memSum/$memTotal*100" | bc -l`
  relOwnuse=`echo "scale=2; $memOwnTotal/$memTotal*100" | bc -l`
  
  echo -e "--------------------------------------------------------------------------------------"
  echo -e '\e[1m'"Total"'\t\t'$OneMinSum'\t'$FiveMinSum'\t'$FifteenMinSum'\t'$coreSum'\t'$memSum"/"$memTotal'\t   '"("$reluse"%)"'\t'"("$relOwnuse"%)"'\e[0m'
fi

